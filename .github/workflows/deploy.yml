name: Deploy to AWS using Terraform & Ansible

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.11.2

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        run: |
          curl -O https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
          
          # Remove existing directory or file named "terraform"
          if [ -d "terraform" ]; then 
            echo "⚠️ Removing existing 'terraform' directory..."
            rm -rf terraform
          elif [ -f "terraform" ]; then
            echo "⚠️ Removing existing 'terraform' binary..."
            rm -f terraform
          fi
          
          # Extract the binary
          unzip -o terraform_${{ env.TF_VERSION }}_linux_amd64.zip
          
          # Move Terraform to a system-wide path
          sudo mv terraform /usr/local/bin/
          sudo chmod +x /usr/local/bin/terraform
          
          # Verify installation
          echo "✅ Terraform installed successfully!"
          which terraform
          terraform -version


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Add this line!
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Terraform Directory Exists
        run: mkdir -p terraform
      - name: Debug - List Terraform Files
        run: ls -lah terraform/

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -upgrade

      - name: Validate Terraform
        working-directory: terraform
        run: terraform validate
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the entire repository is fetched

      - name: List Terraform Files
        run: ls -lah terraform
      - name: Reinitialize Terraform (Fix Lock File)
        working-directory: terraform
        run: |
          rm -rf .terraform .terraform.lock.hcl  # Remove old lock file
          terraform init -upgrade
          terraform validate


      - name: Apply Terraform
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Wait for EC2 and Fetch Public IP
        id: ec2_ip
        run: |
          # Get ONLY the latest RUNNING instance with Name=WebServer
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=WebServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text | head -n 1)

          echo "Filtered Instance ID: $INSTANCE_ID"

          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ ERROR: No running instance found with Name=webserver!"
            exit 1
          fi

          echo "Waiting for EC2 instance to be in 'running' state..."
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

          echo "✅ EC2 is now running!"

          echo "Fetching Public IP..."
          while true; do
            IP=$(aws ec2 describe-instances \
              --instance-ids "$INSTANCE_ID" \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)

            if [[ "$IP" != "None" && -n "$IP" ]]; then
              echo "✅ EC2 Public IP: $IP"
              echo "EC2_IP=$IP" >> $GITHUB_ENV
              echo "::set-output name=EC2_IP::$IP"
              break
            fi

            echo "⏳ Public IP not assigned yet... waiting 5s"
            sleep 5
          done
        shell: bash
        
  ansible:
    name: Configure EC2 with Ansible
    runs-on: ubuntu-latest
    needs: terraform
    env:
      EC2_IP: ${{ needs.terraform.outputs.ec2_ip }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          sudo apt update -y
          sudo apt install -y ansible
          ansible --version

      - name: Set Up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/labsuser.pem
          chmod 400 ~/.ssh/labsuser.pem
          

      - name: Debug - Check EC2 IP Value
        run: |
          echo "EC2 IP in Ansible Job: ${{ env.EC2_IP }}"


      - name: Test SSH Connection
        run: ssh -i ~/.ssh/labsuser.pem -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} "echo 'SSH Connection Successful'"

          
      - name: Update Ansible Inventory
        run: |
          echo "[WebServer]" > ansible/inventory.ini
          echo "${{ env.EC2_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/labsuser.pem" >> ansible/inventory.ini
      - name: Debug - Show Inventory File
        run: cat ansible/inventory.ini
  
      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/inventory.ini ansible/install_docker.yml
